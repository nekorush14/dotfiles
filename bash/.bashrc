#!/bin/bash
#
# このファイルは ~/.bashrc として使用します。
# Generated by Gemini 2.5 Pro
#

# --- 履歴 (History) の設定 ---
# 履歴を保存するファイル
HISTFILE=~/.bash_history
# メモリに記憶するコマンド数
HISTSIZE=10000
# ファイルに保存するコマンド数
HISTFILESIZE=10000

# 履歴の挙動を設定
# HISTCONTROL=ignoreboth は 'erasedups:ignorespace' と同義です。
# erasedups: 履歴全体から重複するコマンド行を削除します。
# ignorespace: スペースで始まるコマンド行を履歴に保存しません。
export HISTCONTROL=ignoreboth

# 複数ターミナルで履歴を即時共有するための設定
# `shopt -s histappend` は、セッション終了時に履歴を追記します。
shopt -s histappend
# `PROMPT_COMMAND` を使い、プロンプト表示毎に履歴の書き込みと読み込みを行います。
PROMPT_COMMAND="history -a; history -n; $PROMPT_COMMAND"

# --- 全般設定 (General conf) ---
# デフォルトエディタ
export EDITOR=nvim

# Emacsキーバインディングを有効化（Bashのデフォルトですが明示的に設定）
set -o emacs

# Ctrl-S/Ctrl-Qによるフロー制御を無効化 (Zshの no_flow_control に相当)
stty -ixon

# 拡張グロブを有効化 (Zshの extended_glob の一部機能に相当)
shopt -s extglob

# `cd` コマンドの軽微なタイプミスを自動修正 (Zshの correct の一部機能に相当)
shopt -s cdspell

# umaskとulimit
umask 022
ulimit -c 0

# (補足) Zsh固有の機能について
# - `autoload`, `colors`, `zstyle` はZshの補完や表示に関する機能のため、Bashに直接の代替はありません。
# - `bindkey '^[[Z' reverse-menu-complete` (Shift+Tabでの逆順補完) は ~/.inputrc に以下を記述することで実現できます:
#   "\e[Z": menu-complete-backward

# --- 補完 (Completion) ---
# `bash-completion` を読み込みます。Homebrewでインストールした場合などを想定しています。
if [ -f "$(brew --prefix)/etc/bash_completion" ]; then
  . "$(brew --prefix)/etc/bash_completion"
elif [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

# `ls` の色設定（macOSのBSD lsとLinuxのGNU lsの両方に対応）
export LSCOLORS=Exfxcxdxbxegedabagacad
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

# (補足) Zshの `setopt menu_select` のような補完メニューは ~/.inputrc で設定します:
#   set show-all-if-ambiguous on
#   TAB: menu-complete

# --- PATH設定 ---
# GOPATH
export GOPATH=$HOME/Repositories/Go

# PATHを構築
# Zshの `path=(...)` 記法をBashの `export PATH=...` 形式に変換します。
# 重複を避けるため、一度空にしてから必要なパスを順に追加します。
NEW_PATH=""
_add_to_path() {
  if [ -d "$1" ] && [[ ":$NEW_PATH:" != *":$1:"* ]]; then
    NEW_PATH="$NEW_PATH:$1"
  fi
}

# パスを順番に追加
_add_to_path "/opt/homebrew/bin"
_add_to_path "/opt/homebrew/sbin"
_add_to_path "/usr/local/bin"
_add_to_path "/usr/local/sbin"
_add_to_path "/usr/bin"
_add_to_path "/usr/sbin"
_add_to_path "/bin"
_add_to_path "/sbin"
_add_to_path "/Library/Apple/usr/bin"
_add_to_path "$HOME/.local/bin"
_add_to_path "$HOME/.cargo/bin"
_add_to_path "$HOME/Library/Android/sdk/platform-tools"
_add_to_path "$GOPATH/bin"

# 先頭のコロンを削除
export PATH="${NEW_PATH#?}"

unset NEW_PATH _add_to_path

# --- 環境変数 (Environment variables) ---
export SNDCPY_HOME="$HOME/Library/sndcpy-v1.1"
export SNDCPY_APK="$HOME/Library/sndcpy-v1.1/sndcpy.apk"
export VLC="/Applications/VLC.app/Contents/MacOS/VLC"
export GPG_TTY=$(tty)

# --- 各種ツールの初期化 ---
# starship
eval "$(starship init bash)"

# zoxide
# Bashでは `cd` を直接置き換えられないため、`z`コマンドでディレクトリ移動します。
eval "$(zoxide init bash)"

# JAVA_HOME (必要に応じてコメント解除)
# export JAVA_HOME=$HOME/Library/Java/JavaVirtualMachines/temurin-17.0.7/Contents/Home

# pyenv
export VIRTUAL_ENV_DISABLE_PROMPT=1
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# --- エイリアス (Alias) ---
if type brew &>/dev/null; then
  alias g="$(brew --prefix)/bin/git"
else
  alias g='git'
fi
alias ls='eza --icons --git'
alias ll='eza --icons --git --time-style relative -l'
alias la='eza --icons --git --time-style relative -la'
alias lla='la'
alias ltl='eza --icons --git -TL=3 -I "node_module|.git|miniconda3|Library|Applications"'
alias lta='eza --icons --git -TL=3 -la -I "node_module|.git|miniconda3|Library|Applications"'
alias cat='bat'
alias du='dust'
alias df='duf'
alias grep='rg'
alias top='btm'
alias lg='lazygit'
alias ld='lazydocker'
alias scrcpy="scrcpy --audio-codec=aac"
alias vlc='/Applications/VLC.app/Contents/MacOS/VLC'
alias bvim='/bin/vim'
alias v='nvim'
alias ocat='/bin/cat'
alias fd='fdfind'
alias awslocal="AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=${DEFAULT_REGION:-$AWS_DEFAULT_REGION} aws --endpoint-url=http://${LOCALSTACK_HOST:-localhost}:4566"
alias spt='spotify_player'
alias csr='cursor'
alias ghqg='ghq get -p'
alias ghqgs='ghq get -p --shallow'
alias ghqu='ghq get -p -u'
alias rm="SAFE_RM_CONFIG=${HOME}/.config/safe-rm/safe-rm.conf safe-rm"
alias tdw="tmux-default-window.sh"

# --- fzf ---
# fzfの基本的な設定ファイルを読み込み
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# fzfのデフォルトコマンド
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!**/.git/*"'
# fzfのデフォルトオプション
export FZF_DEFAULT_OPTS="
    --height 40% --reverse --border=sharp --margin=0,1
    --prompt='>> '
    --color=fg:#c0caf5,bg:#1a1b26,hl:#bb9af7
    --color=fg+:#c0caf5,bg+:#1a1b26,hl+:#7dcfff
    --color=info:#7aa2f7,prompt:#7dcfff,pointer:#7dcfff 
    --color=marker:#9ece6a,spinner:#9ece6a,header:#9ece6a
"
# Ctrl-T の設定
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="
    --preview 'bat --color=always --style=header,grid {}'
    --preview-window=right:60%
"
# Alt-R の設定
export FZF_ALT_R_OPTS="--preview 'eza --tree --icons --color=always {} | head -200'"

# Ctrl-R の設定
export FZF_CTRL_R_OPTS="
    --preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'
"

# fzfのプレビューをコマンドに応じて変更
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
  cd) fzf --preview 'eza --tree --icons --color=always {} | head -200' "$@" ;;
  export | unset) fzf --preview "eval 'echo \${}'" "$@" ;;
  ssh) fzf --preview 'dig {}' "$@" ;;
  *) fzf --preview "bat -n --color=always --line-range :500 {}" "$@" ;;
  esac
}

# ghq + fzf のための関数
# Zshのzleの代わりに、選択後すぐに `cd` を実行します。
ghq-fzf() {
  local repo_root
  repo_root=$(ghq root)
  if [ -z "$repo_root" ]; then
    echo "ghq root not found." >&2
    return 1
  fi
  local selected_dir
  selected_dir=$(ghq list | fzf --preview "bat --color=always --style=header,grid --line-range :80 $repo_root/{}")
  if [[ -n "$selected_dir" ]]; then
    cd "$repo_root/$selected_dir"
  fi
}
# `bind -x` を使い、Ctrl-gキーに関数を割り当てます。
bind -x '"\C-g": ghq-fzf'

# --- その他の設定 ---
# lazygit
export XDG_CONFIG_HOME=${HOME}/.config

# asdf (コメントアウト部分はそのまま)
# export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"

# Yazi (y コマンド)
# この関数はBashでもそのまま動作します。
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# gh-copilot
if command -v gh &>/dev/null && command -v gh-copilot &>/dev/null; then
  eval "$(gh-copilot init --bash)"
fi

# Ruby (rbenv)
if [ -d ~/.rbenv ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# Node.js (nodenv)
eval "$(nodenv init -)"

# tmux conf
function ide() {
  tmux split-window -v -p 25
  tmux split-window -h -p 50
}

# ローカル設定ファイルの読み込み
# ファイル名を `.bashrc.local` に変更
[ -f ~/.bashrc.local ] && source ~/.bashrc.local

# Angular CLI autocompletion
# このコマンドは実行中のシェルを判別するため、Bashでもそのまま動作します。

source <(ng completion script)
